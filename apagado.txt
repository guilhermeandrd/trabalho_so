/*while (1) {

        //protecao do mutex
        pthread_mutex_lock(&mutex_buffer);
        if (num_produtores_ativos == 0 && (idx - total_vendas_consumidas) == 0) { 
            pthread_mutex_unlock(&mutex_buffer);
            sem_post(&full); 
            break; 
        }
        pthread_mutex_unlock(&mutex_buffer);

        for (int k = 0; k < TAMANHO_BUFFER; k++) {
            sem_wait(&full); 
        }

        pthread_mutex_lock(&mutex_buffer);

        int itens_buffer = idx - total_vendas_consumidas; 

        if (num_produtores_ativos == 0 && itens_buffer < TAMANHO_BUFFER) { 
            for (int k = 0; k < TAMANHO_BUFFER; k++) {
                sem_post(&full); 
            }
            pthread_mutex_unlock(&mutex_buffer);
            break; 
        }

        double soma_lote = 0.0; 
        
        for (int k = 0; k < TAMANHO_BUFFER; k++) {
            soma_lote += item[total_vendas_consumidas % TAMANHO_BUFFER]; 
            total_vendas_consumidas++; 
        }
        iteracao_consumo++;

        double media_lote = soma_lote / TAMANHO_BUFFER; 
        printf("(C) TID: %d | MEDIA: R$ %.2f | ITERACAO: %d\n",
               id_consumidor, media_lote, iteracao_consumo); 

        pthread_mutex_unlock(&mutex_buffer);

        for (int k = 0; k < TAMANHO_BUFFER; k++) {
            sem_post(&empty); 
        }

        usleep(100000); 
    }*/
   

    /*while (1)
    {
        pthread_mutex_lock(&mutex_buffer);

        while(idx = total_vendas_consumidas)
        {
            //condição de término:
            // se não há mais produtores ativos, não haverá mais produtos
            // por isso : encerre

            if(num_produtores_ativos == 0){
                
            }
        }

    }*/